
resty 127.0.0.1:9090 2> /dev/null

# TEST 1: basic GET request
GET /simple.html
sleep .25

# TEST 2: basic PUT request
PUT /simple.html 'here is some data'
sleep .25

# TEST 3: basic POST request
POST /simple.html 'here is some data'
sleep .25

# TEST 4: basic DELETE request
DELETE /simple.html
sleep .25

# TEST 5: basic TRACE request
TRACE /simple.html 'here is some data'
sleep .25

# TEST 6: basic OPTIONS request
OPTIONS /simple.html
sleep .25

# TEST 7: Raw response
GET /simple.html -Z
sleep .25

# TEST 8: Get headers too
GET /simple.html -v 2>&1
sleep .25

# TEST 9: POST with data sent in query string
POST /simple.html -d foo=bar -G
sleep .25

# TEST 10: POST with data sent in message body
POST /simple.html '{foo: "bar"}'
sleep .25

# TEST 11: POST with extra header and basic auth, data in message body
POST /simple.html -u "user:secret" -H "Accept: application/json" < simple.json
sleep .25

# TEST 12: json pretty-print formatting
GET /simple.json | ../pp 2>/dev/null
sleep .25

resty 127.0.0.1:9090 -H "Accept: application/json" -u user:pass 2> /dev/null

# TEST 13: make sure the default options are correctly set
GET /simple.json
sleep .25

resty 127.0.0.1:9090 2> /dev/null

# TEST 14: make sure the default options are correctly unset
GET /simple.json

# TEST 15: try PUT with both data in body and query params in url, no urlencode
echo '{"foo":"bar"}' |PUT '/simple.json?param=value&other=blah' -Q

# TEST 16: try PUT with both data in body and query params in url via -q
echo '{"foo":"bar"}' |PUT '/simple.json' -q 'param=value&other=blah'

